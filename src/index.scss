// #region scss
@use 'sass:math';
// #endregion
// #region Tailwind
@tailwind base;
@tailwind components;
@tailwind utilities;
// #endregion
// #region Base

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  @apply bg-black text-white;
}

// #endregion

// .parent2 {
//   @apply relative h-screen flex items-center justify-center;
//   @apply border-2 border-blue-500;
// }

$base-transition: 0.5s;
$VISIBLE_IMG_COUNT: 7;
$surroundingElementsOffsetIdx: floor(math.div($VISIBLE_IMG_COUNT, 2));

.parent {
  @apply w-full h-screen flex justify-center items-center;
  @apply border-2 border-red-500;
  position: relative;

  .base {
    height: 575px;
    opacity: 0.3;
    position: relative;
  }
}

.dupe {
  position: absolute;
  transition: all 0s ease;
}

$halfVisibleImgCount: floor(math.div($VISIBLE_IMG_COUNT, 2));
$middleIdx: 4;
@for $i from 1 through $VISIBLE_IMG_COUNT {
  $relativeIdx: $i - $halfVisibleImgCount - 1;
  $initialHeight: 575px;
  $heightStep: 75px;
  $translateStep: 45%;

  .dupe:nth-of-type(#{$i}) {
    z-index: (103 - math.abs($relativeIdx));
    height: $initialHeight - math.abs($relativeIdx * $heightStep);
    transform: translateX(0 + $relativeIdx * $translateStep);
  }

  @if $i == 1 or $i == $VISIBLE_IMG_COUNT {
    // @debug $relativeIdx;
    .dupe:nth-of-type(#{$i}) {
      opacity: 0;
    }
  }
  .parent {
    &.scrollLeft .dupe:nth-of-type(#{$i}) {
      transition: all $base-transition ease;
      transform: translateX(0 + $relativeIdx * $translateStep + $translateStep);
      height: $initialHeight - math.abs(($relativeIdx + 1) * $heightStep);

      @if $i == 1 {
        opacity: 1;
      }

      @if $i == $VISIBLE_IMG_COUNT - 1 {
        opacity: 0;
      }
    }

    &.scrollRight .dupe:nth-of-type(#{$i}) {
      transition: all $base-transition ease;
      transform: translateX(0 + $relativeIdx * $translateStep - $translateStep);
      height: $initialHeight - math.abs(($relativeIdx - 1) * $heightStep);

      @if $i == $VISIBLE_IMG_COUNT {
        opacity: 1;
      }

      @if $i == 2 {
        opacity: 0;
      }
    }
  }
}

.ghost-parent {
  @apply border-2 border-red-500 h-full flex justify-center
  items-center overflow-x-scroll;
  position: relative;
  overflow: visible;
  width: auto;

  img {
    position: absolute;
    height: 500px;
    transition: all 0s ease;
    opacity: 0;
    z-index: 1000;
  }
  &.scrollLeft,
  &.scrollRight {
    img {
      transition: all $base-transition ease, opacity $base-transition ease !important;
    }
  }
  &.scrollLeft {
    .ghost-dupe:nth-of-type(1) {
      height: 575px;
      transform: translateX(0%);
      opacity: 1;
    }
  }

  &.scrollRight {
    .ghost-dupe:nth-of-type(2) {
      height: 575px;
      transform: translateX(0%);
      opacity: 1;
    }
  }

  .ghost-dupe:nth-of-type(1) {
    transform: translateX(-45%);
  }
  .ghost-dupe:nth-of-type(2) {
    transform: translateX(45%);
  }
}
